@page "/"
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">

    <MudText Typo="Typo.h4" GutterBottom="true">Attribution Results</MudText>

    @if (result == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        @* Portfolio *@
        <MudText Typo="Typo.h5" Class="mt-6 mb-2">Portfolio Holdings</MudText>
        <MudTable Items="result.PortfolioHoldings" Hover="true" Dense="true" Bordered="true" Striped="true"
            RowClassFunc="@GetHoldingRowClass">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.AssetName)">Asset</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.Sector)">Sector</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.Weight)">Weight %</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.Return)">Return %</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Asset">@context.AssetName</MudTd>
                <MudTd DataLabel="Sector">@context.Sector</MudTd>
                <MudTd DataLabel="Weight" Style="text-align:right">@ToPercent(context.Weight)</MudTd>
                <MudTd DataLabel="Return" Style="text-align:right">@ToPercent(context.Return / 100)</MudTd>
            </RowTemplate>
        </MudTable>

        @* Benchmark *@
        <MudText Typo="Typo.h5" Class="mt-6 mb-2">Benchmark Holdings</MudText>
        <MudTable Items="result.BenchmarkHoldings" Hover="true" Dense="true" Bordered="true" Striped="true"
            RowClassFunc="@GetHoldingRowClass">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.Sector)">Sector</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.Weight)">Weight %</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudTableSortLabel SortBy="new Func<HoldingDto, object>(x => x.Return)">Return %</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Sector">@context.Sector</MudTd>
                <MudTd DataLabel="Weight" Style="text-align:right">@ToPercent(context.Weight)</MudTd>
                <MudTd DataLabel="Return" Style="text-align:right">@ToPercent(context.Return / 100)</MudTd>
            </RowTemplate>
        </MudTable>

        @* Summary Card *@
        <MudCard Class="mt-6" Elevation="3">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Summary</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudText>Portfolio Return: <strong>@(result.PortfolioReturn) %</strong></MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText>Benchmark Return: <strong>@(result.BenchmarkReturn) %</strong></MudText>
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudText Color="@GetEffectColor(result.Attribution.AllocationEffect)">
                            Allocation Effect: <strong>@ToPercent(result.Attribution.AllocationEffect / 100)</strong>
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudText Color="@GetEffectColor(result.Attribution.SelectionEffect)">
                            Selection Effect: <strong>@ToPercent(result.Attribution.SelectionEffect / 100)</strong>
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudText Color="@GetEffectColor(result.Attribution.TotalEffect)">
                            Total Effect: <strong>@ToPercent(result.Attribution.TotalEffect / 100)</strong>
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private AttributionResultDto? result;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            result = await Http.GetFromJsonAsync<AttributionResultDto>("api/attribution/run");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    public class AttributionResultDto
    {
        public double PortfolioReturn { get; set; }
        public double BenchmarkReturn { get; set; }
        public AttributionDto Attribution { get; set; } = new();
        public List<HoldingDto> PortfolioHoldings { get; set; } = new();
        public List<HoldingDto> BenchmarkHoldings { get; set; } = new();
    }

    public class AttributionDto
    {
        public double AllocationEffect { get; set; }
        public double SelectionEffect { get; set; }
        public double TotalEffect { get; set; }
    }

    public class HoldingDto
    {
        public string AssetName { get; set; } = "";
        public string Sector { get; set; } = "";
        public double Weight { get; set; }
        public double Return { get; set; }
    }

    private string GetHoldingRowClass(HoldingDto holding, int index)
    {
        return holding.Return < 0 ? "mud-theme-error" : string.Empty;
    }

    private Color GetEffectColor(double value) => value >= 0 ? Color.Success : Color.Error;

    private string ToPercent(double value)
    {
        var percent = value * 100;
        return percent == 0 ? "0.0 %" : $"{percent:F1} %";
    }

}